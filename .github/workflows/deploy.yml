name: Prepare and Deploy Application

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      frontend_repo:
        description: 'Frontend repository URL'
        required: false
        default: 'https://github.com/your-org/frontend-repo.git'
      backend_repo:
        description: 'Backend repository URL'
        required: false
        default: 'https://github.com/your-org/backend-repo.git'

env:
  FRONTEND_REPO_URL: ${{ github.event.inputs.frontend_repo || 'https://github.com/your-org/frontend-repo.git' }}
  BACKEND_REPO_URL: ${{ github.event.inputs.backend_repo || 'https://github.com/your-org/backend-repo.git' }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write  # Required to push version updates
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Setup UV
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Setup Node.js (fallback for frontend)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Setup Python (for backend)
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache Bun dependencies
      uses: actions/cache@v4
      with:
        path: ~/.bun-cache
        key: bun-${{ runner.os }}-${{ hashFiles('frontend/bun.lockb') }}
        restore-keys: |
          bun-${{ runner.os }}-
    
    - name: Cache UV dependencies
      uses: actions/cache@v4
      with:
        path: ~/.uv-cache
        key: uv-${{ runner.os }}-${{ hashFiles('backend/uv.lock', 'backend/pyproject.toml') }}
        restore-keys: |
          uv-${{ runner.os }}-
    
    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Run deployment preparation script
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ./scripts/prepare-deployment.sh ${{ github.event.inputs.version_bump || 'patch' }}
    
    - name: Build Docker images
      run: |
        echo "Building Docker images..."
        # Add your Docker build commands here
        # Example:
        # docker build -t frontend:$(cat version.txt) ./frontend
        # docker build -t backend:$(cat version.txt) ./backend
        echo "Docker build step - customize this section for your needs"
    
    - name: Create Release
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v$(cat version.txt)
        release_name: Release v$(cat version.txt)
        body: |
          Automated release v$(cat version.txt)
          
          Changes:
          - Frontend repository: ${{ env.FRONTEND_REPO_URL }}
          - Backend repository: ${{ env.BACKEND_REPO_URL }}
          - Version bump: ${{ github.event.inputs.version_bump || 'patch' }}
        draft: false
        prerelease: false
